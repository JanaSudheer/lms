pipeline {
    agent {
    node {
         label 'slave'   // slave details to execute job
         }
     }
    environment {
        SONARQUBE_URL = 'http://54.67.11.240:9000'  // Your SonarQube URL
        SONARQUBE_TOKEN = credentials('sonar')  // Replace with your Jenkins credential ID
    }
    stages {
        stage('Notification') {
          steps {
              slackSend channel: 'deployment-team', color: '#439FE0', message: '*LMS Backend* deployment job started', teamDomain: 'project-ste2943', tokenCredentialId: 'slack'
                }
            }
        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool name: 'sonarqube', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                    withSonarQubeEnv('sonarqube') {  // Name of SonarQube instance in Jenkins configuration
                        sh """
                        ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=lmsbe \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=${SONARQUBE_URL} \
                        -Dsonar.login=${SONARQUBE_TOKEN}
                        """
                    }
                }
            }
        }
        stage('Email Notification') {
              steps {
                  emailext body: 'LMS Backend application deployed successfully into Prod Environment', subject: 'Ecomm Deployment', to: 'murali@digitaledify.ai'
                  }
              }
        stage('Post-Build Cleanup') {
            steps {
                echo "Cleaning workspace after build..."
                cleanWs()  // Optional: Clean workspace after the build
            }
        }
    }
}
